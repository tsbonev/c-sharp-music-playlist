// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MusicPlaylistRESTClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for MusicPlaylistRESTAPI.
    /// </summary>
    public static partial class MusicPlaylistRESTAPIExtensions
    {
            /// <summary>
            /// Retrieves all songs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Song> GetAllSongs(this IMusicPlaylistRESTAPI operations)
            {
                return Task.Factory.StartNew(s => ((IMusicPlaylistRESTAPI)s).GetAllSongsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all songs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Song>> GetAllSongsAsync(this IMusicPlaylistRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSongsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register song
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registerSongRequest'>
            /// </param>
            public static Song RegisterSong(this IMusicPlaylistRESTAPI operations, RegisterSongRequest registerSongRequest)
            {
                return Task.Factory.StartNew(s => ((IMusicPlaylistRESTAPI)s).RegisterSongAsync(registerSongRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register song
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registerSongRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Song> RegisterSongAsync(this IMusicPlaylistRESTAPI operations, RegisterSongRequest registerSongRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterSongWithHttpMessagesAsync(registerSongRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Song By Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Song GetSongById(this IMusicPlaylistRESTAPI operations, string id)
            {
                return Task.Factory.StartNew(s => ((IMusicPlaylistRESTAPI)s).GetSongByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Song By Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Song> GetSongByIdAsync(this IMusicPlaylistRESTAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSongByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete song by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the order
            /// </param>
            public static Song DeleteSongById(this IMusicPlaylistRESTAPI operations, string id)
            {
                return Task.Factory.StartNew(s => ((IMusicPlaylistRESTAPI)s).DeleteSongByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete song by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the order
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Song> DeleteSongByIdAsync(this IMusicPlaylistRESTAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSongByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update song by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the order
            /// </param>
            /// <param name='uptadeRequest'>
            /// </param>
            public static void UpdateSongById(this IMusicPlaylistRESTAPI operations, string id, UpdateSongRequest uptadeRequest)
            {
                Task.Factory.StartNew(s => ((IMusicPlaylistRESTAPI)s).UpdateSongByIdAsync(id, uptadeRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update song by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the order
            /// </param>
            /// <param name='uptadeRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSongByIdAsync(this IMusicPlaylistRESTAPI operations, string id, UpdateSongRequest uptadeRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateSongByIdWithHttpMessagesAsync(id, uptadeRequest, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get artist's songs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistName'>
            /// </param>
            public static IList<Song> GetSongsByArtist(this IMusicPlaylistRESTAPI operations, string artistName)
            {
                return Task.Factory.StartNew(s => ((IMusicPlaylistRESTAPI)s).GetSongsByArtistAsync(artistName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get artist's songs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Song>> GetSongsByArtistAsync(this IMusicPlaylistRESTAPI operations, string artistName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSongsByArtistWithHttpMessagesAsync(artistName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all genres
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistName'>
            /// </param>
            public static IList<string> GetAllGenres(this IMusicPlaylistRESTAPI operations, string artistName)
            {
                return Task.Factory.StartNew(s => ((IMusicPlaylistRESTAPI)s).GetAllGenresAsync(artistName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all genres
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetAllGenresAsync(this IMusicPlaylistRESTAPI operations, string artistName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllGenresWithHttpMessagesAsync(artistName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get song by genre
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='genre'>
            /// </param>
            public static IList<Song> GetSongsByGenre(this IMusicPlaylistRESTAPI operations, string genre)
            {
                return Task.Factory.StartNew(s => ((IMusicPlaylistRESTAPI)s).GetSongsByGenreAsync(genre), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get song by genre
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='genre'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Song>> GetSongsByGenreAsync(this IMusicPlaylistRESTAPI operations, string genre, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSongsByGenreWithHttpMessagesAsync(genre, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
